1.Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. 
Both the arrays can be sorted or unsorted. It may be assumed that elements in both array are distinct.

code:
#include <bits/stdc++.h>
bool isSubset(int arr1[], int arr2[],
              int m, int n)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            if (arr2[i] == arr1[j])
                break;
        }
        if (j == m)
            return 0;
    }
    return 1;
}
int main()
{
    int arr1[] = { 11, 1, 13, 21, 3, 7 };
    int arr2[] = { 11, 3, 7, 1 };
 
    int m = sizeof(arr1) / sizeof(arr1[0]);
    int n = sizeof(arr2) / sizeof(arr2[0]);
 
    if (isSubset(arr1, arr2, m, n))
        printf("arr2[] is subset of arr1[] ");
    else
        printf("arr2[] is not a subset of arr1[]");
 
    getchar();
    return 0;
}


2.Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.
 code:
#include <bits/stdc++.h>
using namespace std;
bool find3Numbers(int A[], int arr_size, int sum)
{
    int l, r;
    for (int i = 0; i < arr_size - 2; i++)
    {
        for (int j = i + 1; j < arr_size - 1; j++)
        {
            for (int k = j + 1; k < arr_size; k++)
            {
                if (A[i] + A[j] + A[k] == sum)
                {
                    cout << "Triplet is " << A[i] <<
                        ", " << A[j] << ", " << A[k];
                    return true;
                }
            }
        }
    }
    return false;
}
int main()
{
    int A[] = { 1, 4, 45, 6, 10, 8 };
    int sum = 13;
    int arr_size = sizeof(A) / sizeof(A[0]);
    find3Numbers(A, arr_size, sum);
    return 0;
}


3.A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor
 belt (in the order given by weights). 
We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

code:
public static int ShipWithinDays(int[] weights, int D)  
{  
    int minimumWeight = weights.Max();  
    int maximumWeight = weights.Sum();  
  
    if (TotalDaysToShip(weights, minimumWeight) <= D)  
        return minimumWeight;  
      
    int currentGuess;  
    int bestGuess = -1;  
  
    while (minimumWeight <= maximumWeight)  
    {  
        currentGuess = (maximumWeight + minimumWeight) / 2;  
        if (TotalDaysToShip(weights, currentGuess) <= D)  
        {  
            bestGuess = currentGuess;  
            maximumWeight = currentGuess - 1;  
        }  
        else  
            minimumWeight = currentGuess + 1;  
    }  
    return bestGuess;  
static void Main(string[] args)  
{  
    int result = ShipWithinDays(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, D: 5);  
    // example 1 : result = 15  
    result = ShipWithinDays(new int[] { 3, 2, 2, 4, 1, 4 }, D: 3);  
    // example 2 : result = 6  
    result = ShipWithinDays(new int[] { 1, 2, 3, 1, 1 }, D : 4);  
    // example 3 : result = 3  
}  
}  
private static int TotalDaysToShip(int[] weights, int capacity)  
{  
    int days = 1;  
    int currentShip = 0;  
    foreach (int weight in weights)  
    {  
        if (currentShip + weight > capacity)  
        {  
            currentShip = 0;  
            days++;  
        }  
        currentShip += weight;  
    }  
    return days;  
}  
